!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Args	json/value.h	/^  typedef std::vector<PathArgument> Args;$/;"	t	class:Json::Path
ArrayIndex	json/forwards.h	/^typedef unsigned int ArrayIndex;$/;"	t	namespace:Json
ArrayIndex	json/value.h	/^  typedef Json::ArrayIndex ArrayIndex;$/;"	t	class:Json::Value
CPPTL_AUTOLINK_DLL	json/autolink.h	18;"	d
CPPTL_AUTOLINK_DLL	json/autolink.h	20;"	d
CPPTL_AUTOLINK_NAME	json/autolink.h	17;"	d
CPPTL_JSON_ASSERTIONS_H_INCLUDED	json/assertions.h	7;"	d
CPPTL_JSON_FEATURES_H_INCLUDED	json/features.h	7;"	d
CPPTL_JSON_H_INCLUDED	json/value.h	7;"	d
CPPTL_JSON_READER_H_INCLUDED	json/reader.h	7;"	d
CZString	json/value.h	/^  class CZString {$/;"	c	class:Json::Value
Capacity	MsgPool.hpp	/^    size_t Capacity;$/;"	m	class:MsgPool
Char	json/reader.h	/^  typedef char Char;$/;"	t	class:Json::Reader
CharReader	json/reader.h	/^class JSON_API CharReader {$/;"	c	namespace:Json
CharReaderBuilder	json/reader.h	/^class JSON_API CharReaderBuilder : public CharReader::Factory {$/;"	c	namespace:Json
ChatServer	ChatServer.hpp	/^    ChatServer()$/;"	f	class:ChatServer
ChatServer	ChatServer.hpp	/^class ChatServer$/;"	c
ChildValues	json/writer.h	/^  typedef std::vector<std::string> ChildValues;$/;"	t	class:Json::StyledStreamWriter
ChildValues	json/writer.h	/^  typedef std::vector<std::string> ChildValues;$/;"	t	class:Json::StyledWriter
CliAddrLen_	UserManager.hpp	/^    socklen_t CliAddrLen_;$/;"	m	class:UserInfo
CliAddr_	UserManager.hpp	/^    struct sockaddr_in CliAddr_;$/;"	m	class:UserInfo	typeref:struct:UserInfo::sockaddr_in
CommentInfo	json/value.h	/^  struct CommentInfo {$/;"	s	class:Json::Value
CommentPlacement	json/value.h	/^enum CommentPlacement {$/;"	g	namespace:Json
ConsumeMsgStart	ChatServer.hpp	/^    static void* ConsumeMsgStart(void* arg)$/;"	f	class:ChatServer
DEBUG	LogSvr.hpp	/^  DEBUG$/;"	e	enum:LogLevel
DealLogin	ChatServer.hpp	/^    int DealLogin(int Sock)$/;"	f	class:ChatServer
DealLoginout	ChatServer.hpp	/^    int DealLoginout()$/;"	f	class:ChatServer
DealRegister	ChatServer.hpp	/^    int DealRegister(int Sock,uint64_t* UserId)$/;"	f	class:ChatServer
Deserialize	Message.hpp	/^    void Deserialize(std::string Message)$/;"	f	class:Message
DuplicationPolicy	json/value.h	/^    enum DuplicationPolicy {$/;"	g	class:Json::Value::CZString
ERROR	LogSvr.hpp	/^  ERROR,$/;"	e	enum:LogLevel
ErrorInfo	json/reader.h	/^  class ErrorInfo {$/;"	c	class:Json::Reader
Errors	json/reader.h	/^  typedef std::deque<ErrorInfo> Errors;$/;"	t	class:Json::Reader
Exception	json/value.h	/^class JSON_API Exception : public std::exception {$/;"	c	namespace:Json
FATAL	LogSvr.hpp	/^  FATAL,$/;"	e	enum:LogLevel
Factory	json/reader.h	/^  class Factory {$/;"	c	class:Json::CharReader
Factory	json/writer.h	/^  class JSON_API Factory {$/;"	c	class:Json::StreamWriter
FastWriter	json/writer.h	/^class JSON_API FastWriter : public Writer {$/;"	c	namespace:Json
Features	json/features.h	/^class JSON_API Features {$/;"	c	namespace:Json
GetPassws	UserManager.hpp	/^    std::string& GetPassws()$/;"	f	class:UserInfo
GetServer	ConnectInfo.hpp	/^    void* GetServer()$/;"	f	class:LoginConnect
GetTcpSock	ConnectInfo.hpp	/^    int GetTcpSock()$/;"	f	class:LoginConnect
GetTimeStamp	LogSvr.hpp	/^    static int GetTimeStamp()$/;"	f	class:LogTime
GetTimeStamp	LogSvr.hpp	/^    static void GetTimeStamp(std::string& timestamp)$/;"	f	class:LogTime
GetUserId	Message.hpp	/^    uint64_t& GetUserId()$/;"	f	class:Message
GetUserStatus	UserManager.hpp	/^    int& GetUserStatus()$/;"	f	class:UserInfo
INFO	LogSvr.hpp	/^  INFO = 0,$/;"	e	enum:LogLevel
InArgs	json/value.h	/^  typedef std::vector<const PathArgument*> InArgs;$/;"	t	class:Json::Path
IninServer	ChatServer.hpp	/^    void IninServer()$/;"	f	class:ChatServer
Int	json/config.h	/^typedef int Int;$/;"	t	namespace:Json
Int	json/value.h	/^  typedef Json::Int Int;$/;"	t	class:Json::Value
Int64	json/config.h	/^typedef __int64 Int64;$/;"	t	namespace:Json
Int64	json/config.h	/^typedef long long int Int64;$/;"	t	namespace:Json
Int64	json/value.h	/^  typedef Json::Int64 Int64;$/;"	t	class:Json::Value
IsFull	MsgPool.hpp	/^    bool IsFull()$/;"	f	class:MsgPool
IsLogin	UserManager.hpp	/^    bool IsLogin(uint64_t UserId,const struct sockaddr_in& CliAddr,const socklen_t& CliaddrLen)$/;"	f	class:UserManager
JSONCPP_DEPRECATED	json/config.h	72;"	d
JSONCPP_DEPRECATED	json/config.h	75;"	d
JSONCPP_DEPRECATED	json/config.h	78;"	d
JSONCPP_DEPRECATED	json/config.h	80;"	d
JSONCPP_DEPRECATED	json/config.h	84;"	d
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	json/config.h	42;"	d
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	json/config.h	47;"	d
JSONCPP_VERSION_HEXA	json/version.h	11;"	d
JSONCPP_VERSION_MAJOR	json/version.h	7;"	d
JSONCPP_VERSION_MINOR	json/version.h	8;"	d
JSONCPP_VERSION_PATCH	json/version.h	9;"	d
JSONCPP_VERSION_QUALIFIER	json/version.h	10;"	d
JSONCPP_VERSION_STRING	json/version.h	6;"	d
JSON_API	json/config.h	38;"	d
JSON_API	json/config.h	41;"	d
JSON_API	json/config.h	46;"	d
JSON_API	json/config.h	51;"	d
JSON_ASSERT	json/assertions.h	23;"	d
JSON_ASSERT	json/assertions.h	35;"	d
JSON_ASSERT_MESSAGE	json/assertions.h	49;"	d
JSON_AUTOLINK_H_INCLUDED	json/autolink.h	7;"	d
JSON_CONFIG_H_INCLUDED	json/config.h	7;"	d
JSON_FAIL_MESSAGE	json/assertions.h	26;"	d
JSON_FAIL_MESSAGE	json/assertions.h	39;"	d
JSON_FORWARDS_H_INCLUDED	json/forwards.h	7;"	d
JSON_HAS_INT64	json/config.h	105;"	d
JSON_HAS_INT64	json/config.h	93;"	d
JSON_JSON_H_INCLUDED	json/json.h	7;"	d
JSON_USE_CPPTL	json/config.h	33;"	d
JSON_USE_EXCEPTION	json/config.h	22;"	d
JSON_USE_INT64_DOUBLE_CONVERSION	json/config.h	62;"	d
JSON_VERSION_H_INCLUDED	json/version.h	4;"	d
JSON_WRITER_H_INCLUDED	json/writer.h	7;"	d
Json	json/config.h	/^namespace Json {$/;"	n
Json	json/features.h	/^namespace Json {$/;"	n
Json	json/forwards.h	/^namespace Json {$/;"	n
Json	json/reader.h	/^namespace Json {$/;"	n
Json	json/value.h	/^namespace Json {$/;"	n
Json	json/writer.h	/^namespace Json {$/;"	n
Kind	json/value.h	/^  enum Kind {$/;"	g	class:Json::PathArgument
LOG	LogSvr.hpp	62;"	d
LOGIN	ConnectInfo.hpp	5;"	d
LOGINED	ConnectInfo.hpp	/^  LOGINED$/;"	e	enum:USerStatus
LOGINED	UserManager.hpp	13;"	d
LOGINFAILED	ConnectInfo.hpp	/^  LOGINFAILED,$/;"	e	enum:USerStatus
LOGINOUT	ConnectInfo.hpp	6;"	d
LargestInt	json/config.h	/^typedef Int64 LargestInt;$/;"	t	namespace:Json
LargestInt	json/config.h	/^typedef int LargestInt;$/;"	t	namespace:Json
LargestInt	json/value.h	/^  typedef Json::LargestInt LargestInt;$/;"	t	class:Json::Value
LargestUInt	json/config.h	/^typedef UInt64 LargestUInt;$/;"	t	namespace:Json
LargestUInt	json/config.h	/^typedef unsigned int LargestUInt;$/;"	t	namespace:Json
LargestUInt	json/value.h	/^  typedef Json::LargestUInt LargestUInt;$/;"	t	class:Json::Value
Level	LogSvr.hpp	/^const char* Level[]={$/;"	v
Location	json/reader.h	/^  typedef const Char* Location;$/;"	t	class:Json::Reader
Lock_	UserManager.hpp	/^      pthread_mutex_t Lock_;$/;"	m	class:UserManager
Log	LogSvr.hpp	/^inline std::ostream& Log(LogLevel lev,const char* file,int line, const std::string& logmsg)$/;"	f
LogLevel	LogSvr.hpp	/^enum LogLevel$/;"	g
LogTime	LogSvr.hpp	/^class LogTime$/;"	c
LogicError	json/value.h	/^class JSON_API LogicError : public Exception {$/;"	c	namespace:Json
Login	UserManager.hpp	/^    int Login(const uint64_t& UserId,const std::string& Passwd)$/;"	f	class:UserManager
LoginConnect	ConnectInfo.hpp	/^    LoginConnect(int sock,void* Server)$/;"	f	class:LoginConnect
LoginConnect	ConnectInfo.hpp	/^class LoginConnect$/;"	c
LoginInfo	ConnectInfo.hpp	/^struct LoginInfo$/;"	s
LoginRegStart	ChatServer.hpp	/^    static void* LoginRegStart(void* arg)$/;"	f	class:ChatServer
MSG_POOL_SIZE	MsgPool.hpp	7;"	d
Members	json/value.h	/^  typedef std::vector<std::string> Members;$/;"	t	class:Json::Value
Message	Message.hpp	/^class Message$/;"	c
MsgPool	MsgPool.hpp	/^    MsgPool()$/;"	f	class:MsgPool
MsgPool	MsgPool.hpp	/^class MsgPool$/;"	c
MsgQueLock_	MsgPool.hpp	/^    pthread_mutex_t MsgQueLock_;$/;"	m	class:MsgPool
MsgQue_	MsgPool.hpp	/^    std::queue<std::string> MsgQue_;$/;"	m	class:MsgPool
Msg_	Message.hpp	/^    std::string Msg_;$/;"	m	class:Message
NickName_	ConnectInfo.hpp	/^    char NickName_[15];$/;"	m	struct:RegInfo
NickName_	Message.hpp	/^    std::string NickName_;$/;"	m	class:Message
NickName_	UserManager.hpp	/^    std::string NickName_;$/;"	m	class:UserInfo
Nodes	json/reader.h	/^  typedef std::stack<Value*> Nodes;$/;"	t	class:Json::Reader
OFFLINE	UserManager.hpp	11;"	d
ONLINE	UserManager.hpp	14;"	d
ObjectValues	json/value.h	/^  typedef CppTL::SmallMap<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
ObjectValues	json/value.h	/^  typedef std::map<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
OnlineUserVec_	UserManager.hpp	/^      std::vector<UserInfo> OnlineUserVec_;$/;"	m	class:UserManager
Passwd_	ConnectInfo.hpp	/^    char Passwd_[20];$/;"	m	struct:RegInfo
Passwd_	ConnectInfo.hpp	/^  char Passwd_[20];$/;"	m	struct:LoginInfo
Passwd_	UserManager.hpp	/^    std::string Passwd_;$/;"	m	class:UserInfo
Path	json/value.h	/^class JSON_API Path {$/;"	c	namespace:Json
PathArgument	json/value.h	/^class JSON_API PathArgument {$/;"	c	namespace:Json
PopMsgPool	MsgPool.hpp	/^    void PopMsgPool(std::string* msg)$/;"	f	class:MsgPool
PreparUserId_	UserManager.hpp	/^      uint64_t PreparUserId_;$/;"	m	class:UserManager
ProductMsgStart	ChatServer.hpp	/^    static void* ProductMsgStart(void* arg)$/;"	f	class:ChatServer
PushMsgPool	MsgPool.hpp	/^    void PushMsgPool(std::string&msg)$/;"	f	class:MsgPool
REGFAILED	ConnectInfo.hpp	/^  REGFAILED = 0,$/;"	e	enum:USerStatus
REGISTER	ConnectInfo.hpp	4;"	d
REGISTERED	ConnectInfo.hpp	/^  REGISTERED,$/;"	e	enum:USerStatus
REGISTERED	UserManager.hpp	12;"	d
Reader	json/reader.h	/^class JSON_API Reader {$/;"	c	namespace:Json
RecvMsg	ChatServer.hpp	/^    void RecvMsg()$/;"	f	class:ChatServer
RegInfo	ConnectInfo.hpp	/^struct RegInfo$/;"	s
Register	UserManager.hpp	/^    int Register(const std::string& NickName,const std::string& School,const std::string& Passwd,uint64_t* UserId)$/;"	f	class:UserManager
RelyInfo	ConnectInfo.hpp	/^struct RelyInfo$/;"	s
RuntimeError	json/value.h	/^class JSON_API RuntimeError : public Exception {$/;"	c	namespace:Json
School_	ConnectInfo.hpp	/^    char School_[20];$/;"	m	struct:RegInfo
School_	Message.hpp	/^    std::string School_;$/;"	m	class:Message
School_	UserManager.hpp	/^    std::string School_;$/;"	m	class:UserInfo
SelfType	json/value.h	/^  typedef ValueConstIterator SelfType;$/;"	t	class:Json::ValueConstIterator
SelfType	json/value.h	/^  typedef ValueIterator SelfType;$/;"	t	class:Json::ValueIterator
SelfType	json/value.h	/^  typedef ValueIteratorBase SelfType;$/;"	t	class:Json::ValueIteratorBase
Server_	ConnectInfo.hpp	/^    void* Server_;$/;"	m	class:LoginConnect
SetCliAddrInfo	UserManager.hpp	/^    void SetCliAddrInfo(const struct sockaddr_in& CliAddr)$/;"	f	class:UserInfo
SetCliAddrLen	UserManager.hpp	/^    void SetCliAddrLen(const socklen_t& CliAddrLen)$/;"	f	class:UserInfo
SetUserStatus	UserManager.hpp	/^    void SetUserStatus(int Status)$/;"	f	class:UserInfo
Sock_	ConnectInfo.hpp	/^    int Sock_;$/;"	m	class:LoginConnect
Start	ChatServer.hpp	/^    void Start()$/;"	f	class:ChatServer
StaticString	json/value.h	/^  explicit StaticString(const char* czstring) : c_str_(czstring) {}$/;"	f	class:Json::StaticString
StaticString	json/value.h	/^class JSON_API StaticString {$/;"	c	namespace:Json
Status	ConnectInfo.hpp	/^  int Status;$/;"	m	struct:RelyInfo
StreamWriter	json/writer.h	/^class JSON_API StreamWriter {$/;"	c	namespace:Json
StreamWriterBuilder	json/writer.h	/^class JSON_API StreamWriterBuilder : public StreamWriter::Factory {$/;"	c	namespace:Json
StringStorage	json/value.h	/^    struct StringStorage {$/;"	s	class:Json::Value::CZString
StyledStreamWriter	json/writer.h	/^class JSON_API StyledStreamWriter {$/;"	c	namespace:Json
StyledWriter	json/writer.h	/^class JSON_API StyledWriter : public Writer {$/;"	c	namespace:Json
SynComQue_	MsgPool.hpp	/^    pthread_cond_t SynComQue_;$/;"	m	class:MsgPool
SynProQue_	MsgPool.hpp	/^    pthread_cond_t SynProQue_;$/;"	m	class:MsgPool
TCP_PORT	ChatServer.hpp	18;"	d
THREAD_COUNT	ChatServer.hpp	19;"	d
Token	json/reader.h	/^  class Token {$/;"	c	class:Json::Reader
TokenType	json/reader.h	/^  enum TokenType {$/;"	g	class:Json::Reader
UDP_PORT	ChatServer.hpp	17;"	d
UInt	json/config.h	/^typedef unsigned int UInt;$/;"	t	namespace:Json
UInt	json/value.h	/^  typedef Json::UInt UInt;$/;"	t	class:Json::Value
UInt64	json/config.h	/^typedef unsigned __int64 UInt64;$/;"	t	namespace:Json
UInt64	json/config.h	/^typedef unsigned long long int UInt64;$/;"	t	namespace:Json
UInt64	json/value.h	/^  typedef Json::UInt64 UInt64;$/;"	t	class:Json::Value
USerStatus	ConnectInfo.hpp	/^enum USerStatus$/;"	g
UserId_	ConnectInfo.hpp	/^  u_int64_t UserId_;\/\/返回给用户的ID号$/;"	m	struct:LoginInfo
UserId_	ConnectInfo.hpp	/^  uint64_t UserId_;$/;"	m	struct:RelyInfo
UserId_	Message.hpp	/^    uint64_t UserId_;$/;"	m	class:Message
UserId_	UserManager.hpp	/^    uint64_t UserId_;$/;"	m	class:UserInfo
UserInfo	UserManager.hpp	/^    UserInfo(const std::string& NickName,const std::string& School,uint64_t UserId,const std::string& Passwd)$/;"	f	class:UserInfo
UserInfo	UserManager.hpp	/^class UserInfo$/;"	c
UserManager	UserManager.hpp	/^    UserManager()$/;"	f	class:UserManager
UserManager	UserManager.hpp	/^class UserManager$/;"	c
UserMap_	UserManager.hpp	/^      std::unordered_map<uint64_t,UserInfo> UserMap_;$/;"	m	class:UserManager
UserStatus_	UserManager.hpp	/^    int UserStatus_;$/;"	m	class:UserInfo
Value	json/value.h	/^class JSON_API Value {$/;"	c	namespace:Json
ValueConstIterator	json/value.h	/^class JSON_API ValueConstIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueHolder	json/value.h	/^  union ValueHolder {$/;"	u	class:Json::Value
ValueIterator	json/value.h	/^class JSON_API ValueIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueIteratorBase	json/value.h	/^class JSON_API ValueIteratorBase {$/;"	c	namespace:Json
ValueType	json/value.h	/^enum ValueType {$/;"	g	namespace:Json
WARNING	LogSvr.hpp	/^  WARNING,$/;"	e	enum:LogLevel
Writer	json/writer.h	/^class JSON_API Writer {$/;"	c	namespace:Json
addChildValues_	json/writer.h	/^  bool addChildValues_;$/;"	m	class:Json::StyledWriter
allowComments_	json/features.h	/^  bool allowComments_;$/;"	m	class:Json::Features
args_	json/value.h	/^  Args args_;$/;"	m	class:Json::Path
arrayValue	json/value.h	/^  arrayValue,    \/\/\/< array value (ordered list)$/;"	e	enum:Json::ValueType
begin_	json/reader.h	/^  Location begin_;$/;"	m	class:Json::Reader
bool_	json/value.h	/^    bool bool_;$/;"	m	union:Json::Value::ValueHolder
booleanValue	json/value.h	/^  booleanValue,  \/\/\/< bool value$/;"	e	enum:Json::ValueType
c_str	json/value.h	/^  const char* c_str() const { return c_str_; }$/;"	f	class:Json::StaticString
c_str_	json/value.h	/^  const char* c_str_;$/;"	m	class:Json::StaticString
childValues_	json/writer.h	/^  ChildValues childValues_;$/;"	m	class:Json::StyledStreamWriter
childValues_	json/writer.h	/^  ChildValues childValues_;$/;"	m	class:Json::StyledWriter
collectComments_	json/reader.h	/^  bool collectComments_;$/;"	m	class:Json::Reader
commentAfter	json/value.h	/^  commentAfter, \/\/\/< a comment on the line after a value (only make sense for$/;"	e	enum:Json::CommentPlacement
commentAfterOnSameLine	json/value.h	/^  commentAfterOnSameLine, \/\/\/< a comment just after a value on the same line$/;"	e	enum:Json::CommentPlacement
commentBefore	json/value.h	/^  commentBefore = 0,      \/\/\/< a comment placed on the line before a value$/;"	e	enum:Json::CommentPlacement
comment_	json/value.h	/^    char* comment_;$/;"	m	struct:Json::Value::CommentInfo
commentsBefore_	json/reader.h	/^  std::string commentsBefore_;$/;"	m	class:Json::Reader
comments_	json/value.h	/^  CommentInfo* comments_;$/;"	m	class:Json::Value
const_iterator	json/value.h	/^  typedef ValueConstIterator const_iterator;$/;"	t	class:Json::Value
cstr_	json/value.h	/^    char const* cstr_;  \/\/ actually, a prefixed string, unless policy is noDup$/;"	m	class:Json::Value::CZString
current_	json/reader.h	/^  Location current_;$/;"	m	class:Json::Reader
current_	json/value.h	/^  Value::ObjectValues::iterator current_;$/;"	m	class:Json::ValueIteratorBase
difference_type	json/value.h	/^  typedef int difference_type;$/;"	t	class:Json::ValueIterator
difference_type	json/value.h	/^  typedef int difference_type;$/;"	t	class:Json::ValueIteratorBase
document_	json/reader.h	/^  std::string document_;$/;"	m	class:Json::Reader
document_	json/writer.h	/^  std::ostream* document_;$/;"	m	class:Json::StyledStreamWriter
document_	json/writer.h	/^  std::string document_;$/;"	m	class:Json::FastWriter
document_	json/writer.h	/^  std::string document_;$/;"	m	class:Json::StyledWriter
duplicate	json/value.h	/^      duplicate,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateOnCopy	json/value.h	/^      duplicateOnCopy$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
end_	json/reader.h	/^    Location end_;$/;"	m	class:Json::Reader::Token
end_	json/reader.h	/^  Location end_;$/;"	m	class:Json::Reader
errors_	json/reader.h	/^  Errors errors_;$/;"	m	class:Json::Reader
extra_	json/reader.h	/^    Location extra_;$/;"	m	class:Json::Reader::ErrorInfo
features_	json/reader.h	/^  Features features_;$/;"	m	class:Json::Reader
indentSize_	json/writer.h	/^  int indentSize_;$/;"	m	class:Json::StyledWriter
indentString_	json/writer.h	/^  std::string indentString_;$/;"	m	class:Json::StyledStreamWriter
indentString_	json/writer.h	/^  std::string indentString_;$/;"	m	class:Json::StyledWriter
indentation_	json/writer.h	/^  std::string indentation_;$/;"	m	class:Json::StyledStreamWriter
index_	json/value.h	/^      ArrayIndex index_;$/;"	m	union:Json::Value::CZString::__anon1
index_	json/value.h	/^  ArrayIndex index_;$/;"	m	class:Json::PathArgument
intValue	json/value.h	/^  intValue,      \/\/\/< signed integer value$/;"	e	enum:Json::ValueType
int_	json/value.h	/^    LargestInt int_;$/;"	m	union:Json::Value::ValueHolder
isNull_	json/value.h	/^  bool isNull_;$/;"	m	class:Json::ValueIteratorBase
iterator	json/value.h	/^  typedef ValueIterator iterator;$/;"	t	class:Json::Value
iterator_category	json/value.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:Json::ValueIteratorBase
key_	json/value.h	/^  std::string key_;$/;"	m	class:Json::PathArgument
kindIndex	json/value.h	/^    kindIndex,$/;"	e	enum:Json::PathArgument::Kind
kindKey	json/value.h	/^    kindKey$/;"	e	enum:Json::PathArgument::Kind
kindNone	json/value.h	/^    kindNone = 0,$/;"	e	enum:Json::PathArgument::Kind
kind_	json/value.h	/^  Kind kind_;$/;"	m	class:Json::PathArgument
lastValueEnd_	json/reader.h	/^  Location lastValueEnd_;$/;"	m	class:Json::Reader
lastValue_	json/reader.h	/^  Value* lastValue_;$/;"	m	class:Json::Reader
length_	json/value.h	/^      unsigned length_: 30; \/\/ 1GB max$/;"	m	struct:Json::Value::CZString::StringStorage
main	ChatServer.cpp	/^int main()$/;"	f
map_	json/value.h	/^    ObjectValues* map_;$/;"	m	union:Json::Value::ValueHolder
maxInt	json/value.h	/^  static const Int maxInt;$/;"	m	class:Json::Value
maxInt64	json/value.h	/^  static const Int64 maxInt64;$/;"	m	class:Json::Value
maxLargestInt	json/value.h	/^  static const LargestInt maxLargestInt;$/;"	m	class:Json::Value
maxLargestUInt	json/value.h	/^  static const LargestUInt maxLargestUInt;$/;"	m	class:Json::Value
maxUInt	json/value.h	/^  static const UInt maxUInt;$/;"	m	class:Json::Value
maxUInt64	json/value.h	/^  static const UInt64 maxUInt64;$/;"	m	class:Json::Value
message_	json/reader.h	/^    std::string message_;$/;"	m	class:Json::Reader::ErrorInfo
minInt	json/value.h	/^  static const Int minInt;$/;"	m	class:Json::Value
minInt64	json/value.h	/^  static const Int64 minInt64;$/;"	m	class:Json::Value
minLargestInt	json/value.h	/^  static const LargestInt minLargestInt;$/;"	m	class:Json::Value
msg_	json/value.h	/^  std::string const msg_;$/;"	m	class:Json::Exception::std
noDuplication	json/value.h	/^      noDuplication = 0,$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
nodes_	json/reader.h	/^  Nodes nodes_;$/;"	m	class:Json::Reader
null	json/value.h	/^  static const Value null;$/;"	m	class:Json::Value
nullRef	json/value.h	/^  static const Value& nullRef;$/;"	m	class:Json::Value
nullValue	json/value.h	/^  nullValue = 0, \/\/\/< 'null' value$/;"	e	enum:Json::ValueType
numberOfCommentPlacement	json/value.h	/^  numberOfCommentPlacement$/;"	e	enum:Json::CommentPlacement
objectValue	json/value.h	/^  objectValue    \/\/\/< object value (collection of name\/value pairs).$/;"	e	enum:Json::ValueType
operator !=	json/value.h	/^  bool operator!=(const SelfType& other) const { return !isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator *	json/value.h	/^  reference operator*() const { return deref(); }$/;"	f	class:Json::ValueConstIterator
operator *	json/value.h	/^  reference operator*() const { return deref(); }$/;"	f	class:Json::ValueIterator
operator ++	json/value.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueConstIterator
operator ++	json/value.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueIterator
operator ++	json/value.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueConstIterator
operator ++	json/value.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueIterator
operator -	json/value.h	/^  difference_type operator-(const SelfType& other) const {$/;"	f	class:Json::ValueIteratorBase
operator --	json/value.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueConstIterator
operator --	json/value.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueIterator
operator --	json/value.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueConstIterator
operator --	json/value.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueIterator
operator ->	json/value.h	/^  pointer operator->() const { return &deref(); }$/;"	f	class:Json::ValueConstIterator
operator ->	json/value.h	/^  pointer operator->() const { return &deref(); }$/;"	f	class:Json::ValueIterator
operator ==	json/value.h	/^  bool operator==(const SelfType& other) const { return isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator const char*	json/value.h	/^  operator const char*() const { return c_str_; }$/;"	f	class:Json::StaticString
pointer	json/value.h	/^  typedef Value* pointer;$/;"	t	class:Json::ValueIterator
pointer	json/value.h	/^  typedef const Value* pointer;$/;"	t	class:Json::ValueConstIterator
policy_	json/value.h	/^      unsigned policy_: 2;$/;"	m	struct:Json::Value::CZString::StringStorage
realValue	json/value.h	/^  realValue,     \/\/\/< double value$/;"	e	enum:Json::ValueType
real_	json/value.h	/^    double real_;$/;"	m	union:Json::Value::ValueHolder
reference	json/value.h	/^  typedef Value& reference;$/;"	t	class:Json::ValueIterator
reference	json/value.h	/^  typedef const Value& reference;$/;"	t	class:Json::ValueConstIterator
rightMargin_	json/writer.h	/^  int rightMargin_;$/;"	m	class:Json::StyledStreamWriter
rightMargin_	json/writer.h	/^  int rightMargin_;$/;"	m	class:Json::StyledWriter
settings_	json/reader.h	/^  Json::Value settings_;$/;"	m	class:Json::CharReaderBuilder
settings_	json/writer.h	/^  Json::Value settings_;$/;"	m	class:Json::StreamWriterBuilder
size_t	json/value.h	/^  typedef unsigned int size_t;$/;"	t	class:Json::ValueIterator
size_t	json/value.h	/^  typedef unsigned int size_t;$/;"	t	class:Json::ValueIteratorBase
sout_	json/writer.h	/^  std::ostream* sout_;  \/\/ not owned; will not delete$/;"	m	class:Json::StreamWriter
start_	json/reader.h	/^    Location start_;$/;"	m	class:Json::Reader::Token
std	json/value.h	/^namespace std {$/;"	n
storage_	json/value.h	/^      StringStorage storage_;$/;"	m	union:Json::Value::CZString::__anon1
strictRoot_	json/features.h	/^  bool strictRoot_;$/;"	m	class:Json::Features
stringValue	json/value.h	/^  stringValue,   \/\/\/< UTF-8 string value$/;"	e	enum:Json::ValueType
string_	json/value.h	/^    char* string_;  \/\/ actually ptr to unsigned, followed by str, unless !allocated_$/;"	m	union:Json::Value::ValueHolder
swap	json/value.h	/^inline void swap(Json::Value& a, Json::Value& b) { a.swap(b); }$/;"	f	namespace:std
tokenArrayBegin	json/reader.h	/^    tokenArrayBegin,$/;"	e	enum:Json::Reader::TokenType
tokenArrayEnd	json/reader.h	/^    tokenArrayEnd,$/;"	e	enum:Json::Reader::TokenType
tokenArraySeparator	json/reader.h	/^    tokenArraySeparator,$/;"	e	enum:Json::Reader::TokenType
tokenComment	json/reader.h	/^    tokenComment,$/;"	e	enum:Json::Reader::TokenType
tokenEndOfStream	json/reader.h	/^    tokenEndOfStream = 0,$/;"	e	enum:Json::Reader::TokenType
tokenError	json/reader.h	/^    tokenError$/;"	e	enum:Json::Reader::TokenType
tokenFalse	json/reader.h	/^    tokenFalse,$/;"	e	enum:Json::Reader::TokenType
tokenMemberSeparator	json/reader.h	/^    tokenMemberSeparator,$/;"	e	enum:Json::Reader::TokenType
tokenNull	json/reader.h	/^    tokenNull,$/;"	e	enum:Json::Reader::TokenType
tokenNumber	json/reader.h	/^    tokenNumber,$/;"	e	enum:Json::Reader::TokenType
tokenObjectBegin	json/reader.h	/^    tokenObjectBegin,$/;"	e	enum:Json::Reader::TokenType
tokenObjectEnd	json/reader.h	/^    tokenObjectEnd,$/;"	e	enum:Json::Reader::TokenType
tokenString	json/reader.h	/^    tokenString,$/;"	e	enum:Json::Reader::TokenType
tokenTrue	json/reader.h	/^    tokenTrue,$/;"	e	enum:Json::Reader::TokenType
token_	json/reader.h	/^    Token token_;$/;"	m	class:Json::Reader::ErrorInfo
type_	json/reader.h	/^    TokenType type_;$/;"	m	class:Json::Reader::Token
uintValue	json/value.h	/^  uintValue,     \/\/\/< unsigned integer value$/;"	e	enum:Json::ValueType
uint_	json/value.h	/^    LargestUInt uint_;$/;"	m	union:Json::Value::ValueHolder
value_	json/value.h	/^  } value_;$/;"	m	class:Json::Value	typeref:union:Json::Value::ValueHolder
value_type	json/value.h	/^  typedef Value value_type;$/;"	t	class:Json::ValueIterator
value_type	json/value.h	/^  typedef const Value value_type;$/;"	t	class:Json::ValueConstIterator
yamlCompatiblityEnabled_	json/writer.h	/^  bool yamlCompatiblityEnabled_;$/;"	m	class:Json::FastWriter
~CharReader	json/reader.h	/^  virtual ~CharReader() {}$/;"	f	class:Json::CharReader
~ChatServer	ChatServer.hpp	/^    ~ChatServer()$/;"	f	class:ChatServer
~Factory	json/reader.h	/^    virtual ~Factory() {}$/;"	f	class:Json::CharReader::Factory
~FastWriter	json/writer.h	/^  virtual ~FastWriter() {}$/;"	f	class:Json::FastWriter
~MsgPool	MsgPool.hpp	/^    ~MsgPool()$/;"	f	class:MsgPool
~StyledStreamWriter	json/writer.h	/^  ~StyledStreamWriter() {}$/;"	f	class:Json::StyledStreamWriter
~StyledWriter	json/writer.h	/^  virtual ~StyledWriter() {}$/;"	f	class:Json::StyledWriter
~UserManager	UserManager.hpp	/^    ~UserManager()$/;"	f	class:UserManager
